import asyncio
from pytoniq_core import Address
from pytoniq import LiteBalancer, WalletV4R2
import sys
import os

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –æ–¥–∏–Ω–∏—Ü—å TON
def to_nano(ton_amount):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î TON –≤ nanoTON"""
    return int(ton_amount * 1_000_000_000)

def from_nano(nano_amount):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î nanoTON –≤ TON"""
    return nano_amount / 1_000_000_000

async def main():
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    if not os.path.exists("seed.txt"):
        print("‚ùå –§–∞–π–ª seed.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        sys.exit(1)
    
    if not os.path.exists("wallets.txt"):
        print("‚ùå –§–∞–π–ª wallets.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        sys.exit(1)
    
    # –ó—á–∏—Ç—É—î–º–æ seed-—Ñ—Ä–∞–∑—É
    try:
        with open("seed.txt", "r", encoding="utf-8") as f:
            mnemonic = f.read().strip().split()
            
        if len(mnemonic) not in [12, 24]:
            print("‚ùå Seed-—Ñ—Ä–∞–∑–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ 12 –∞–±–æ 24 —Å–ª–æ–≤–∞!")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è seed.txt: {e}")
        sys.exit(1)
    
    # –ó—á–∏—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å
    try:
        with open("wallets.txt", "r", encoding="utf-8") as f:
            addresses = [line.strip() for line in f if line.strip()]
            
        if not addresses:
            print("‚ùå –§–∞–π–ª wallets.txt –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤–∞–ª—ñ–¥–Ω–∏—Ö –∞–¥—Ä–µ—Å!")
            sys.exit(1)
            
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è wallets.txt: {e}")
        sys.exit(1)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        amount = float(input("–°–∫—ñ–ª—å–∫–∏ TON –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫–æ–∂–Ω–æ–º—É? "))
        if amount <= 0:
            print("‚ùå –°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
            sys.exit(1)
    except ValueError:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏!")
        sys.exit(1)
    
    comment = input("–ö–æ–º–µ–Ω—Ç–∞—Ä (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ): ").strip()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –æ–ø–µ—Ä–∞—Ü—ñ—é
    print(f"\nüìã –ë—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {amount} TON –¥–æ {len(addresses)} –∞–¥—Ä–µ—Å")
    print(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {amount * len(addresses)} TON")
    
    confirm = input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): ").strip().lower()
    if confirm != 'y' and confirm != 'yes':
        print("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        sys.exit(0)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç
    client = None
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ TON
        client = LiteBalancer.from_mainnet_config(trust_level=2)
        await client.start_up()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≥–∞–º–∞–Ω–µ—Ü—å –∑ –º–Ω–µ–º–æ–Ω—ñ—á–Ω–æ—ó —Ñ—Ä–∞–∑–∏
        wallet = await WalletV4R2.from_mnemonic(client, mnemonic)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∞–¥—Ä–µ—Å—É –≥–∞–º–∞–Ω—Ü—è
        address = wallet.address
        print(f"\nüîë –í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å: {address.to_str()}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –±–∞–ª–∞–Ω—Å
        balance = await wallet.get_balance()
        balance_ton = from_nano(balance)
        print(f"üí≥ –ë–∞–ª–∞–Ω—Å: {balance_ton:.6f} TON")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤
        total_needed = amount * len(addresses)
        if balance_ton < total_needed:
            print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ü–æ—Ç—Ä—ñ–±–Ω–æ: {total_needed} TON, —î: {balance_ton:.6f} TON")
            return
        
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        successful = 0
        failed = 0
        
        for i, dest_addr in enumerate(addresses, 1):
            try:
                print(f"üì§ [{i}/{len(addresses)}] –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ {dest_addr}...")
                
                # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫—É –∑–∞—Ç—Ä–∏–º–∫—É –º—ñ–∂ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏
                if i > 1:
                    await asyncio.sleep(3)
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –∞–¥—Ä–µ—Å—É –æ—Ç—Ä–∏–º—É–≤–∞—á–∞
                destination = Address(dest_addr)
                
                # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
                result = await wallet.transfer(
                    destination=destination,
                    amount=to_nano(amount),
                    body=comment if comment else ""
                )
                
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {amount} TON –¥–æ {dest_addr}")
                successful += 1
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–ª—è {dest_addr}: {e}")
                failed += 1
                
                # –ú–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏: –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞—Ç–∏ —á–∏ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è
                if input("–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é? (y/N): ").strip().lower() not in ['y', 'yes']:
                    break
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:")
        print(f"‚úÖ –£—Å–ø—ñ—à–Ω–æ: {successful}")
        print(f"‚ùå –ü–æ–º–∏–ª–æ–∫: {failed}")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        
    finally:
        if client:
            await client.close_all()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
