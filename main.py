#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import asyncio
import os
import sys
from typing import List, Optional, Union
from decimal import Decimal
import json
import time

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–º–ø–æ—Ä—Ç colorama
try:
    from colorama import Fore, Back, Style, init
    init(autoreset=True)
    COLORAMA_AVAILABLE = True
except ImportError:
    print("–£–≤–∞–≥–∞: colorama –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: pip install colorama")
    COLORAMA_AVAILABLE = False
    class MockColor:
        def __getattr__(self, name):
            return ""
    Fore = Back = Style = MockColor()
    def init(**kwargs):
        pass

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ —ñ–º–ø–æ—Ä—Ç TON SDK
TON_SDK_AVAILABLE = False
try:
    from tonsdk.provider import ToncenterClient
    from tonsdk.utils import to_nano, from_nano, Address
    from tonsdk.contract.wallet import Wallets
    from tonsdk.boc import Cell
    TON_SDK_AVAILABLE = True
except ImportError as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ —ñ–º–ø–æ—Ä—Ç—É tonsdk: {e}")
    print("\n–î–ª—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
    print("pip install tonsdk")
    try:
        print("\n–°–ø—Ä–æ–±—É—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É pytonlib...")
        import pytonlib
        print("pytonlib –¥–æ—Å—Ç—É–ø–Ω–∏–π! –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—é.")
    except ImportError:
        print("pytonlib —Ç–∞–∫–æ–∂ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
        print("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –æ–¥–Ω—É –∑ –±—ñ–±–ª—ñ–æ—Ç–µ–∫: pip install tonsdk –∞–±–æ pip install pytonlib")
    response = input("\n–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –±–µ–∑ TON SDK –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó? (y/n): ")
    if response.lower() != 'y':
        sys.exit(1)

class TONBatchTransfer:
    def __init__(self):
        self.client = None
        self.wallet = None
        self.seed_phrase = None
        self.addresses = []
        self.demo_mode = not TON_SDK_AVAILABLE

    def print_colored(self, message: str, color: str = "", style: str = ""):
        if COLORAMA_AVAILABLE:
            print(f"{style}{color}{message}{Style.RESET_ALL}")
        else:
            print(message)

    def print_header(self, text: str):
        separator = "=" * 50
        if COLORAMA_AVAILABLE:
            print(f"\n{Back.BLUE}{Fore.WHITE} {text} {Style.RESET_ALL}")
        else:
            print(f"\n{separator}\n {text}\n{separator}")

    def print_success(self, text: str):
        self.print_colored(f"‚úÖ {text}", Fore.GREEN, Style.BRIGHT)

    def print_error(self, text: str):
        self.print_colored(f"‚ùå {text}", Fore.RED, Style.BRIGHT)

    def print_warning(self, text: str):
        self.print_colored(f"‚ö†Ô∏è  {text}", Fore.YELLOW, Style.BRIGHT)

    def print_info(self, text: str):
        self.print_colored(f"‚ÑπÔ∏è  {text}", Fore.CYAN)

    def check_dependencies(self):
        self.print_header("–ü–ï–†–ï–í–Ü–†–ö–ê –ó–ê–õ–ï–ñ–ù–û–°–¢–ï–ô")
        if not TON_SDK_AVAILABLE:
            self.print_error("TON SDK –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
            self.print_warning("–ó–∞–ø—É—Å–∫ —É –¥–µ–º–æ-—Ä–µ–∂–∏–º—ñ...")
            self.demo_mode = True
            return False
        self.print_success("–£—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return True

    def setup_wallet(self):
        self.print_header("–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø –ì–ê–ú–ê–ù–¶–Ø")
        if self.demo_mode:
            self.print_warning("–î–µ–º–æ-—Ä–µ–∂–∏–º: —ñ–º—ñ—Ç–∞—Ü—ñ—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥–∞–º–∞–Ω—Ü—è")
            self.seed_phrase = ["demo"] * 24
            return True
        print("1. –í–≤–µ—Å—Ç–∏ seed –≤—Ä—É—á–Ω—É\n2. –ó—á–∏—Ç–∞—Ç–∏ –∑ —Ñ–∞–π–ª—É")
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä (1 –∞–±–æ 2): ").strip()
        if choice == "1":
            seed_input = input("–í–≤–µ–¥—ñ—Ç—å seed —Ñ—Ä–∞–∑—É (24 —Å–ª–æ–≤–∞): ").strip()
            self.seed_phrase = seed_input.split()
        elif choice == "2":
            filename = input("–§–∞–π–ª –∑ seed —Ñ—Ä–∞–∑–æ—é: ").strip()
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    self.seed_phrase = f.read().strip().split()
                self.print_success("Seed –∑—á–∏—Ç–∞–Ω–æ")
            except Exception as e:
                self.print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
                return False
        else:
            self.print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä!")
            return False

        if len(self.seed_phrase) != 24:
            self.print_error("Seed –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ 24 —Å–ª–æ–≤–∞!")
            return False

        try:
            self.client = ToncenterClient(
                base_url="https://toncenter.com/api/v2/",
                api_key=None
            )
            # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Wallets –∑–∞–º—ñ—Å—Ç—å WalletV4R2
            from tonsdk.contract.wallet import Wallets, WalletVersionEnum
            _mn, pub_k, priv_k, wallet = Wallets.from_mnemonics(
                self.seed_phrase,
                WalletVersionEnum.v4r2,
                0
            )
            wallet.provider = self.client
            self.wallet = wallet

            address = self.wallet.address.to_string(True, True, True)
            self.print_success("–ì–∞–º–∞–Ω–µ—Ü—å –≥–æ—Ç–æ–≤–∏–π!")
            self.print_info(f"–ê–¥—Ä–µ—Å–∞: {address}")
            return True
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –≥–∞–º–∞–Ω—Ü—è: {e}")
            return False

    def load_addresses(self):
        self.print_header("–ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø –ê–î–†–ï–°")
        filename = input("–§–∞–π–ª –∑ –∞–¥—Ä–µ—Å–∞–º–∏: ").strip()
        if not os.path.exists(filename):
            self.print_error("–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return False
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                raw = [line.strip() for line in f.readlines() if line.strip()]
            self.addresses = []
            for addr in raw:
                try:
                    Address(addr)
                    self.addresses.append(addr)
                except:
                    self.print_warning(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω—É –∞–¥—Ä–µ—Å—É: {addr}")
            if not self.addresses:
                self.print_error("–ù–µ–º–∞—î –≤–∞–ª—ñ–¥–Ω–∏—Ö –∞–¥—Ä–µ—Å")
                return False
            self.print_success(f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(self.addresses)} –∞–¥—Ä–µ—Å")
            return True
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è: {e}")
            return False

    async def get_wallet_balance(self):
        if self.demo_mode:
            return Decimal('10.0')
        try:
            wallet_address = self.wallet.address.to_string(True, True, True)
            balance = self.client.get_balance(wallet_address)
            return from_nano(int(balance))
        except Exception as e:
            self.print_error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å: {e}")
            return Decimal('0')

    def get_transfer_amount(self, balance):
        self.print_header("–°–£–ú–ê –î–õ–Ø –ü–ï–†–ï–ö–ê–ó–£")
        print("1. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞\n2. –°—É–º–∞ –Ω–∞ –∫–æ–∂–µ–Ω –∞–¥—Ä–µ—Å")
        choice = input("–í–∞—à –≤–∏–±—ñ—Ä: ").strip()
        try:
            if choice == '1':
                total = float(input("–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ (TON): "))
                per = total / len(self.addresses)
                return Decimal(str(per)), "–∑–∞–≥–∞–ª—å–Ω–∞"
            elif choice == '2':
                per = float(input("–°—É–º–∞ –Ω–∞ –∫–æ–∂–µ–Ω –∞–¥—Ä–µ—Å (TON): "))
                return Decimal(str(per)), "–Ω–∞ –∫–æ–∂–µ–Ω"
        except:
            self.print_error("–ù–µ–≤—ñ—Ä–Ω–∞ —Å—É–º–∞")
        return None, None

    async def send_transaction(self, to_address: str, amount: Decimal):
        if self.demo_mode:
            await asyncio.sleep(0.1)
            return {"hash": f"demo_hash_{to_address}"}
        try:
            transfer = [{
                'address': Address(to_address),
                'amount': to_nano(amount),
                'payload': 'Batch transfer'
            }]
            boc = await self.wallet.transfer(transfer)
            result = self.client.send_boc(boc['boc'])
            return result
        except Exception as e:
            self.print_error(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {to_address}: {e}")
            return None

    async def execute_batch_transfer(self, amount):
        self.print_header("–ü–û–ß–ê–¢–û–ö –ü–ï–†–ï–ö–ê–ó–Ü–í")
        for addr in self.addresses:
            result = await self.send_transaction(addr, amount)
            if result:
                self.print_success(f"‚úÖ {addr}: {amount} TON")
            else:
                self.print_error(f"‚ùå {addr}")
            await asyncio.sleep(1)

    async def run(self):
        self.print_colored("üöÄ TON Batch Transfer üöÄ", Fore.MAGENTA, Style.BRIGHT)
        self.check_dependencies()
        if not self.setup_wallet(): return
        if not self.load_addresses(): return
        balance = await self.get_wallet_balance()
        if balance <= 0:
            self.print_error("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤")
            return
        amount, mode = self.get_transfer_amount(balance)
        if not amount:
            return
        confirm = input("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –ø–µ—Ä–µ–∫–∞–∑? (y/n): ").strip().lower()
        if confirm in ['y', 'yes', '—Ç–∞–∫']:
            await self.execute_batch_transfer(amount)


def main():
    try:
        tool = TONBatchTransfer()
        asyncio.run(tool.run())
    except KeyboardInterrupt:
        print("\n–û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

if __name__ == "__main__":
    main()
