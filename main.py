
import asyncio
from pytoniq_core import Address
from pytoniq import LiteBalancer, WalletV4R2
import sys
import os

# Colorama –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤–∏–≤–æ–¥—É
try:
    from colorama import Fore, Back, Style, init
    init(autoreset=True)
    COLORAMA = True
except ImportError:
    COLORAMA = False
    class Dummy:
        def __getattr__(self, name): return ""
    Fore = Back = Style = Dummy()

# –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –æ–¥–∏–Ω–∏—Ü—å TON

def to_nano(ton_amount):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î TON –≤ nanoTON"""
    return int(ton_amount * 1_000_000_000)

def from_nano(nano_amount):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î nanoTON –≤ TON"""
    return nano_amount / 1_000_000_000

def print_header(text):
    if COLORAMA:
        print(f"\n{Back.BLUE}{Fore.WHITE}{Style.BRIGHT} {text} {Style.RESET_ALL}")
    else:
        print(f"\n{'='*50}\n{text}\n{'='*50}")

def print_success(text):
    if COLORAMA:
        print(f"{Fore.GREEN}{Style.BRIGHT}‚úÖ {text}{Style.RESET_ALL}")
    else:
        print(f"‚úÖ {text}")

def print_error(text):
    if COLORAMA:
        print(f"{Fore.RED}{Style.BRIGHT}‚ùå {text}{Style.RESET_ALL}")
    else:
        print(f"‚ùå {text}")

def print_warning(text):
    if COLORAMA:
        print(f"{Fore.YELLOW}{Style.BRIGHT}‚ö†Ô∏è  {text}{Style.RESET_ALL}")
    else:
        print(f"‚ö†Ô∏è  {text}")

def print_info(text):
    if COLORAMA:
        print(f"{Fore.CYAN}‚ÑπÔ∏è  {text}{Style.RESET_ALL}")
    else:
        print(f"‚ÑπÔ∏è  {text}")

async def main():
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    if not os.path.exists("seed.txt"):
        print_error("–§–∞–π–ª seed.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        sys.exit(1)
    if not os.path.exists("wallets.txt"):
        print_error("–§–∞–π–ª wallets.txt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        sys.exit(1)
    
    # –ó—á–∏—Ç—É—î–º–æ seed-—Ñ—Ä–∞–∑—É
    try:
        with open("seed.txt", "r", encoding="utf-8") as f:
            mnemonic = f.read().strip().split()
        if len(mnemonic) not in [12, 24]:
            print_error("Seed-—Ñ—Ä–∞–∑–∞ –ø–æ–≤–∏–Ω–Ω–∞ –º—ñ—Å—Ç–∏—Ç–∏ 12 –∞–±–æ 24 —Å–ª–æ–≤–∞!")
            sys.exit(1)
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è seed.txt: {e}")
        sys.exit(1)
    
    # –ó—á–∏—Ç—É—î–º–æ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å
    try:
        with open("wallets.txt", "r", encoding="utf-8") as f:
            addresses = [line.strip() for line in f if line.strip()]
        if not addresses:
            print_error("–§–∞–π–ª wallets.txt –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –≤–∞–ª—ñ–¥–Ω–∏—Ö –∞–¥—Ä–µ—Å!")
            sys.exit(1)
    except Exception as e:
        print_error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è wallets.txt: {e}")
        sys.exit(1)
    
    # –í–∏–≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –≥–∞–º–∞–Ω—Ü—ñ–≤ —ñ –±–∞–ª–∞–Ω—Å—É –ø–µ—Ä–µ–¥ –≤–≤–µ–¥–µ–Ω–Ω—è–º —Å—É–º–∏
    print_header("–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ì–ê–ú–ê–ù–ï–¶–¨")
    print_info(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏: {len(addresses)}")
    # –ü–æ–∫–∞–∑–∞—Ç–∏ –±–∞–ª–∞–Ω—Å (–æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ, —è–∫—â–æ —â–µ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ)
    # –Ø–∫—â–æ balance_ton —â–µ –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ, –æ—Ç—Ä–∏–º–∞—Ç–∏ –π–æ–≥–æ
    if 'balance_ton' not in locals():
        try:
            client_tmp = LiteBalancer.from_mainnet_config(trust_level=2)
            await client_tmp.start_up()
            wallet_tmp = await WalletV4R2.from_mnemonic(client_tmp, mnemonic)
            balance = await wallet_tmp.get_balance()
            balance_ton = from_nano(balance)
            await client_tmp.close_all()
        except Exception as e:
            print_warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å: {e}")
            balance_ton = 0
    print_info(f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {balance_ton:.6f} TON")

    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        amount = float(input(f"{Fore.YELLOW if COLORAMA else ''}–°–∫—ñ–ª—å–∫–∏ TON –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –∫–æ–∂–Ω–æ–º—É? {Style.RESET_ALL if COLORAMA else ''}"))
        if amount <= 0:
            print_error("–°—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0!")
            sys.exit(1)
    except ValueError:
        print_error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏!")
        sys.exit(1)

    comment = input(f"{Fore.YELLOW if COLORAMA else ''}–ö–æ–º–µ–Ω—Ç–∞—Ä (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ): {Style.RESET_ALL if COLORAMA else ''}").strip()

    print_header("–ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –û–ü–ï–†–ê–¶–Ü–á")
    print_info(f"–ë—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {amount} TON –¥–æ {len(addresses)} –∞–¥—Ä–µ—Å")
    print_info(f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {amount * len(addresses)} TON")
    if comment:
        print_info(f"–ö–æ–º–µ–Ω—Ç–∞—Ä: {comment}")

    confirm = input(f"{Fore.YELLOW if COLORAMA else ''}–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏? (y/N): {Style.RESET_ALL if COLORAMA else ''}").strip().lower()
    if confirm not in ['y', 'yes']:
        print_error("–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ")
        sys.exit(0)
    
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∫–ª—ñ—î–Ω—Ç
    client = None
    try:
        print_header("–ü–Ü–î–ö–õ–Æ–ß–ï–ù–ù–Ø –î–û TON")
        client = LiteBalancer.from_mainnet_config(trust_level=2)
        await client.start_up()
        wallet = await WalletV4R2.from_mnemonic(client, mnemonic)
        address = wallet.address
        print_success(f"–í–∞—à –≥–∞–º–∞–Ω–µ—Ü—å: {address.to_str()}")
        balance = await wallet.get_balance()
        balance_ton = from_nano(balance)
        print_success(f"–ë–∞–ª–∞–Ω—Å: {balance_ton:.6f} TON")
        total_needed = amount * len(addresses)
        if balance_ton < total_needed:
            print_error(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤! –ü–æ—Ç—Ä—ñ–±–Ω–æ: {total_needed} TON, —î: {balance_ton:.6f} TON")
            return
        print_header("–í–Ü–î–ü–†–ê–í–ö–ê –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô")
        successful = 0
        failed = 0
        for i, dest_addr in enumerate(addresses, 1):
            try:
                print_info(f"[{i}/{len(addresses)}] –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ {dest_addr}...")
                if i > 1:
                    await asyncio.sleep(3)
                destination = Address(dest_addr)
                result = await wallet.transfer(
                    destination=destination,
                    amount=to_nano(amount),
                    body=comment if comment else ""
                )
                print_success(f"–£—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ {amount} TON –¥–æ {dest_addr}")
                successful += 1
            except Exception as e:
                print_error(f"–ü–æ–º–∏–ª–∫–∞ –¥–ª—è {dest_addr}: {e}")
                failed += 1
                if input(f"{Fore.YELLOW if COLORAMA else ''}–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∑ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é? (y/N): {Style.RESET_ALL if COLORAMA else ''}").strip().lower() not in ['y', 'yes']:
                    break
        print_header("–†–ï–ó–£–õ–¨–¢–ê–¢–ò")
        print_success(f"–£—Å–ø—ñ—à–Ω–æ: {successful}")
        if failed:
            print_error(f"–ü–æ–º–∏–ª–æ–∫: {failed}")
    except Exception as e:
        print_error(f"–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
    finally:
        if client:
            await client.close_all()

if __name__ == "__main__":
    try:
        print_header("üöÄ TON Batch Transfer üöÄ")
        asyncio.run(main())
    except KeyboardInterrupt:
        print_error("–û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        sys.exit(0)
    except Exception as e:
        print_error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        sys.exit(1)
